{"version":3,"sources":["../../src/core/Core.js"],"names":["Utils","require","Translator","UppySocket","ee","cuid","throttle","prettyBytes","match","Uppy","opts","defaultLocale","strings","youCanOnlyUploadX","youHaveToAtLeastSelectX","exceedsSize","youCanOnlyUploadFileTypes","uppyServerError","defaultOptions","id","autoProceed","debug","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","meta","onBeforeFileAdded","currentFile","files","Promise","resolve","onBeforeUpload","done","locale","translator","i18n","translate","bind","plugins","getState","getPlugin","updateMeta","initSocket","log","info","hideInfo","addFile","removeFile","pauseResume","calculateProgress","resetProgress","pauseAll","resumeAll","retryAll","cancelAll","retryUpload","emitter","on","off","once","emit","preProcessors","uploaders","postProcessors","state","capabilities","resumableUploads","totalProgress","isHidden","type","message","global","UppyState","uppyLog","_uppy","updateAll","iteratePlugins","plugin","update","setState","patch","prevState","nextState","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","Object","keys","forEach","updatedFile","fileID","progress","addPreProcessor","fn","push","removePreProcessor","i","indexOf","splice","addPostProcessor","removePostProcessor","addUploader","removeUploader","setMeta","data","newMeta","checkMinNumberOfFiles","length","smart_count","checkRestrictions","file","isCorrectFileType","filter","allowedFileTypesString","join","size","beforeFileAdded","then","catch","err","reject","Error","getFileType","fileType","fileName","name","split","fileExtension","getFileNameAndExtension","extension","isRemote","generateFileID","newFile","source","bytesTotal","remote","preview","isFileAllowed","scheduledAutoProceed","setTimeout","upload","console","error","stack","removedFile","calculateTotalProgress","isObjectURL","URL","revokeObjectURL","getFile","generatePreview","isPreviewSupported","createThumbnail","thumbnail","setPreviewURL","warn","wasPaused","isPaused","inProgressUpdatedFiles","filesToRetry","uploadID","createUpload","runUpload","reset","Math","floor","toFixed","inProgress","progressMax","progressAll","actions","details","Date","now","throttledCalculateProgress","leading","trailing","uploadResp","uploadURL","preprocess","postprocess","window","addEventListener","updateOnlineStatus","online","navigator","onLine","wasOffline","getID","use","Plugin","msg","TypeError","pluginId","existsPluginAlready","install","foundPlugin","pluginName","method","pluginType","removePlugin","instance","list","uninstall","index","close","withDevTools","devToolsUnsubscribe","socket","duration","isComplexMessage","clearTimeout","infoTimeoutID","undefined","newInfo","getTimeStamp","dir","run","restore","currentUploads","removeUpload","fileIDs","step","uploadData","restoreStep","steps","lastStep","currentUpload","map","successful","failed","uploader","isMinNumberOfFilesReached","beforeUpload","waitingFileIDs","module","exports"],"mappings":"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","file":"Core.js","sourcesContent":["const Utils = require('../core/Utils')\nconst Translator = require('../core/Translator')\nconst UppySocket = require('./UppySocket')\nconst ee = require('namespace-emitter')\nconst cuid = require('cuid')\nconst throttle = require('lodash.throttle')\nconst prettyBytes = require('prettier-bytes')\nconst match = require('mime-match')\n// const deepFreeze = require('deep-freeze-strict')\n\n/**\n * Main Uppy core\n *\n * @param {object} opts general options, like locales, to show modal or not to show\n */\nclass Uppy {\n  constructor (opts) {\n    const defaultLocale = {\n      strings: {\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        exceedsSize: 'This file exceeds maximum allowed size of',\n        youCanOnlyUploadFileTypes: 'You can only upload:',\n        uppyServerError: 'Connection with Uppy Server failed'\n      }\n    }\n\n    // set default options\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: false,\n        maxNumberOfFiles: false,\n        minNumberOfFiles: false,\n        allowedFileTypes: false\n      },\n      meta: {},\n      onBeforeFileAdded: (currentFile, files) => Promise.resolve(),\n      onBeforeUpload: (files, done) => Promise.resolve(),\n      locale: defaultLocale\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    // // Dictates in what order different plugin types are ran:\n    // this.types = [ 'presetter', 'orchestrator', 'progressindicator',\n    //                 'acquirer', 'modifier', 'uploader', 'presenter', 'debugger']\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({ locale: this.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    // Container for different types of plugins\n    this.plugins = {}\n\n    this.translator = new Translator({ locale: this.opts.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n    this.getState = this.getState.bind(this)\n    this.getPlugin = this.getPlugin.bind(this)\n    this.updateMeta = this.updateMeta.bind(this)\n    this.initSocket = this.initSocket.bind(this)\n    this.log = this.log.bind(this)\n    this.info = this.info.bind(this)\n    this.hideInfo = this.hideInfo.bind(this)\n    this.addFile = this.addFile.bind(this)\n    this.removeFile = this.removeFile.bind(this)\n    this.pauseResume = this.pauseResume.bind(this)\n    this.calculateProgress = this.calculateProgress.bind(this)\n    this.resetProgress = this.resetProgress.bind(this)\n\n    this.pauseAll = this.pauseAll.bind(this)\n    this.resumeAll = this.resumeAll.bind(this)\n    this.retryAll = this.retryAll.bind(this)\n    this.cancelAll = this.cancelAll.bind(this)\n    this.retryUpload = this.retryUpload.bind(this)\n\n    // this.bus = this.emitter = ee()\n    this.emitter = ee()\n    this.on = this.emitter.on.bind(this.emitter)\n    this.off = this.emitter.off.bind(this.emitter)\n    this.once = this.emitter.once.bind(this.emitter)\n    this.emit = this.emitter.emit.bind(this.emitter)\n\n    this.preProcessors = []\n    this.uploaders = []\n    this.postProcessors = []\n\n    this.state = {\n      plugins: {},\n      files: {},\n      capabilities: {\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: Object.assign({}, this.opts.meta),\n      info: {\n        isHidden: true,\n        type: 'info',\n        message: ''\n      }\n    }\n\n    // for debugging and testing\n    // this.updateNum = 0\n    if (this.opts.debug) {\n      global.UppyState = this.state\n      global.uppyLog = ''\n      // global.UppyAddFile = this.addFile.bind(this)\n      global._uppy = this\n    }\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them. Called each time state changes\n   *\n   */\n  updateAll (state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state\n   *\n   * @param {patch} object\n   */\n  setState (patch) {\n    const prevState = Object.assign({}, this.state)\n    const nextState = Object.assign({}, this.state, patch)\n\n    this.state = nextState\n    this.emit('core:state-update', prevState, nextState, patch)\n\n    this.updateAll(this.state)\n  }\n\n  /**\n   * Returns current state\n   *\n   */\n  getState () {\n    // use deepFreeze for debugging\n    // return deepFreeze(this.state)\n    return this.state\n  }\n\n  resetProgress () {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: false\n    }\n    const files = Object.assign({}, this.state.files)\n    const updatedFiles = {}\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = Object.assign({}, files[fileID])\n      updatedFile.progress = Object.assign({}, updatedFile.progress, defaultProgress)\n      updatedFiles[fileID] = updatedFile\n    })\n\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    })\n\n    // TODO Document on the website\n    this.emit('core:reset-progress')\n  }\n\n  addPreProcessor (fn) {\n    this.preProcessors.push(fn)\n  }\n\n  removePreProcessor (fn) {\n    const i = this.preProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.preProcessors.splice(i, 1)\n    }\n  }\n\n  addPostProcessor (fn) {\n    this.postProcessors.push(fn)\n  }\n\n  removePostProcessor (fn) {\n    const i = this.postProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.postProcessors.splice(i, 1)\n    }\n  }\n\n  addUploader (fn) {\n    this.uploaders.push(fn)\n  }\n\n  removeUploader (fn) {\n    const i = this.uploaders.indexOf(fn)\n    if (i !== -1) {\n      this.uploaders.splice(i, 1)\n    }\n  }\n\n  setMeta (data) {\n    const newMeta = Object.assign({}, this.state.meta, data)\n    this.log('Adding metadata:')\n    this.log(data)\n    this.setState({ meta: newMeta })\n  }\n\n  updateMeta (data, fileID) {\n    const updatedFiles = Object.assign({}, this.state.files)\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that’s not with us anymore: ', fileID)\n      return\n    }\n    const newMeta = Object.assign({}, updatedFiles[fileID].meta, data)\n    updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\n      meta: newMeta\n    })\n    this.setState({ files: updatedFiles })\n  }\n\n  /**\n  * Check if minNumberOfFiles restriction is reached before uploading\n  *\n  * @return {boolean}\n  * @private\n  */\n  checkMinNumberOfFiles () {\n    const { minNumberOfFiles } = this.opts.restrictions\n    if (Object.keys(this.state.files).length < minNumberOfFiles) {\n      this.info(`${this.i18n('youHaveToAtLeastSelectX', { smart_count: minNumberOfFiles })}`, 'error', 5000)\n      return false\n    }\n    return true\n  }\n\n  /**\n  * Check if file passes a set of restrictions set in options: maxFileSize,\n  * maxNumberOfFiles and allowedFileTypes\n  *\n  * @param {object} file object to check\n  * @return {boolean}\n  * @private\n  */\n  checkRestrictions (file) {\n    const { maxFileSize, maxNumberOfFiles, allowedFileTypes } = this.opts.restrictions\n\n    if (maxNumberOfFiles) {\n      if (Object.keys(this.state.files).length + 1 > maxNumberOfFiles) {\n        this.info(`${this.i18n('youCanOnlyUploadX', { smart_count: maxNumberOfFiles })}`, 'error', 5000)\n        return false\n      }\n    }\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.filter(match(file.type)).length > 0\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ')\n        this.info(`${this.i18n('youCanOnlyUploadFileTypes')} ${allowedFileTypesString}`, 'error', 5000)\n        return false\n      }\n    }\n\n    if (maxFileSize) {\n      if (file.data.size > maxFileSize) {\n        this.info(`${this.i18n('exceedsSize')} ${prettyBytes(maxFileSize)}`, 'error', 5000)\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n  * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n  * try to guess file type in a clever way, check file against restrictions,\n  * and start an upload if `autoProceed === true`.\n  *\n  * @param {object} file object to add\n  */\n  addFile (file) {\n    // Wrap this in a Promise `.then()` handler so errors will reject the Promise\n    // instead of throwing.\n    const beforeFileAdded = Promise.resolve()\n      .then(() => this.opts.onBeforeFileAdded(file, this.getState().files))\n\n    return beforeFileAdded.catch((err) => {\n      const message = typeof err === 'object' ? err.message : err\n      this.info(message, 'error', 5000)\n      return Promise.reject(new Error(`onBeforeFileAdded: ${message}`))\n    }).then(() => {\n      return Utils.getFileType(file).then((fileType) => {\n        const updatedFiles = Object.assign({}, this.state.files)\n        let fileName\n        if (file.name) {\n          fileName = file.name\n        } else if (fileType.split('/')[0] === 'image') {\n          fileName = fileType.split('/')[0] + '.' + fileType.split('/')[1]\n        } else {\n          fileName = 'noname'\n        }\n        const fileExtension = Utils.getFileNameAndExtension(fileName).extension\n        const isRemote = file.isRemote || false\n\n        const fileID = Utils.generateFileID(file)\n\n        const newFile = {\n          source: file.source || '',\n          id: fileID,\n          name: fileName,\n          extension: fileExtension || '',\n          meta: Object.assign({}, this.getState().meta, {\n            name: fileName,\n            type: fileType\n          }),\n          type: fileType,\n          data: file.data,\n          progress: {\n            percentage: 0,\n            bytesUploaded: 0,\n            bytesTotal: file.data.size || 0,\n            uploadComplete: false,\n            uploadStarted: false\n          },\n          size: file.data.size || 'N/A',\n          isRemote: isRemote,\n          remote: file.remote || '',\n          preview: file.preview\n        }\n\n        const isFileAllowed = this.checkRestrictions(newFile)\n        if (!isFileAllowed) return Promise.reject(new Error('File not allowed'))\n\n        updatedFiles[fileID] = newFile\n        this.setState({ files: updatedFiles })\n\n        this.emit('core:file-added', newFile)\n        this.log(`Added file: ${fileName}, ${fileID}, mime type: ${fileType}`)\n\n        if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n          this.scheduledAutoProceed = setTimeout(() => {\n            this.scheduledAutoProceed = null\n            this.upload().catch((err) => {\n              console.error(err.stack || err.message || err)\n            })\n          }, 4)\n        }\n      })\n    })\n  }\n\n  removeFile (fileID) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const removedFile = updatedFiles[fileID]\n    delete updatedFiles[fileID]\n\n    this.setState({ files: updatedFiles })\n    this.calculateTotalProgress()\n    this.emit('core:file-removed', fileID)\n\n    // Clean up object URLs.\n    if (removedFile.preview && Utils.isObjectURL(removedFile.preview)) {\n      URL.revokeObjectURL(removedFile.preview)\n    }\n\n    this.log(`Removed file: ${fileID}`)\n  }\n\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n  getFile (fileID) {\n    return this.getState().files[fileID]\n  }\n\n  /**\n   * Generate a preview image for the given file, if possible.\n   */\n  generatePreview (file) {\n    if (Utils.isPreviewSupported(file.type) && !file.isRemote) {\n      Utils.createThumbnail(file, 200).then((thumbnail) => {\n        this.setPreviewURL(file.id, thumbnail)\n      }).catch((err) => {\n        console.warn(err.stack || err.message)\n      })\n    }\n  }\n\n  /**\n   * Set the preview URL for a file.\n   */\n  setPreviewURL (fileID, preview) {\n    const { files } = this.state\n    this.setState({\n      files: Object.assign({}, files, {\n        [fileID]: Object.assign({}, files[fileID], {\n          preview: preview\n        })\n      })\n    })\n  }\n\n  pauseResume (fileID) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n\n    if (updatedFiles[fileID].uploadComplete) return\n\n    const wasPaused = updatedFiles[fileID].isPaused || false\n    const isPaused = !wasPaused\n\n    const updatedFile = Object.assign({}, updatedFiles[fileID], {\n      isPaused: isPaused\n    })\n\n    updatedFiles[fileID] = updatedFile\n    this.setState({ files: updatedFiles })\n\n    this.emit('core:upload-pause', fileID, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n        updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: true\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({ files: updatedFiles })\n\n    this.emit('core:pause-all')\n  }\n\n  resumeAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n        updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({ files: updatedFiles })\n\n    this.emit('core:resume-all')\n  }\n\n  retryAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null\n    })\n\n    this.emit('core:retry-all', filesToRetry)\n\n    const uploadID = this.createUpload(filesToRetry)\n    return this.runUpload(uploadID)\n  }\n\n  retryUpload (fileID) {\n    const updatedFiles = Object.assign({}, this.state.files)\n    const updatedFile = Object.assign({}, updatedFiles[fileID],\n      { error: null, isPaused: false }\n    )\n    updatedFiles[fileID] = updatedFile\n    this.setState({\n      files: updatedFiles\n    })\n\n    this.emit('core:upload-retry', fileID)\n\n    const uploadID = this.createUpload([fileID])\n    return this.runUpload(uploadID)\n  }\n\n  reset () {\n    this.cancelAll()\n  }\n\n  cancelAll () {\n    this.emit('core:cancel-all')\n    this.setState({ files: {}, totalProgress: 0 })\n  }\n\n  calculateProgress (data) {\n    const fileID = data.id\n    const updatedFiles = Object.assign({}, this.getState().files)\n\n    // skip progress event for a file that’s been removed\n    if (!updatedFiles[fileID]) {\n      this.log('Trying to set progress for a file that’s not with us anymore: ', fileID)\n      return\n    }\n\n    const updatedFile = Object.assign({}, updatedFiles[fileID],\n      Object.assign({}, {\n        progress: Object.assign({}, updatedFiles[fileID].progress, {\n          bytesUploaded: data.bytesUploaded,\n          bytesTotal: data.bytesTotal,\n          percentage: Math.floor((data.bytesUploaded / data.bytesTotal * 100).toFixed(2))\n        })\n      }\n      ))\n    updatedFiles[data.id] = updatedFile\n\n    this.setState({\n      files: updatedFiles\n    })\n\n    this.calculateTotalProgress()\n  }\n\n  calculateTotalProgress () {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = Object.assign({}, this.getState().files)\n\n    const inProgress = Object.keys(files).filter((file) => {\n      return files[file].progress.uploadStarted\n    })\n    const progressMax = inProgress.length * 100\n    let progressAll = 0\n    inProgress.forEach((file) => {\n      progressAll = progressAll + files[file].progress.percentage\n    })\n\n    const totalProgress = progressMax === 0 ? 0 : Math.floor((progressAll * 100 / progressMax).toFixed(2))\n\n    this.setState({\n      totalProgress: totalProgress\n    })\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `file-add`, `file-remove`, `upload-progress`, `reset`\n   *\n   */\n  actions () {\n    // this.bus.on('*', (payload) => {\n    //   console.log('emitted: ', this.event)\n    //   console.log('with payload: ', payload)\n    // })\n\n    // stress-test re-rendering\n    // setInterval(() => {\n    //   this.setState({bla: 'bla'})\n    // }, 20)\n\n    // this.on('core:state-update', (prevState, nextState, patch) => {\n    //   if (this.withDevTools) {\n    //     this.devTools.send('UPPY_STATE_UPDATE', nextState)\n    //   }\n    // })\n\n    this.on('core:error', (error) => {\n      this.setState({ error: error.message })\n    })\n\n    this.on('core:upload-error', (fileID, error) => {\n      const updatedFiles = Object.assign({}, this.state.files)\n      const updatedFile = Object.assign({}, updatedFiles[fileID],\n        { error: error.message }\n      )\n      updatedFiles[fileID] = updatedFile\n      this.setState({ files: updatedFiles, error: error.message })\n\n      const fileName = this.state.files[fileID].name\n      let message = `Failed to upload ${fileName}`\n      if (typeof error === 'object' && error.message) {\n        message = { message: message, details: error.message }\n      }\n      this.info(message, 'error', 5000)\n    })\n\n    this.on('core:upload', () => {\n      this.setState({ error: null })\n    })\n\n    this.on('core:file-add', (data) => {\n      this.addFile(data)\n    })\n\n    this.on('core:file-added', (file) => {\n      this.generatePreview(file)\n    })\n\n    this.on('core:file-remove', (fileID) => {\n      this.removeFile(fileID)\n    })\n\n    this.on('core:upload-started', (fileID, upload) => {\n      const updatedFiles = Object.assign({}, this.getState().files)\n      const updatedFile = Object.assign({}, updatedFiles[fileID],\n        Object.assign({}, {\n          progress: Object.assign({}, updatedFiles[fileID].progress, {\n            uploadStarted: Date.now(),\n            uploadComplete: false,\n            percentage: 0,\n            bytesUploaded: 0\n          })\n        }\n        ))\n      updatedFiles[fileID] = updatedFile\n\n      this.setState({ files: updatedFiles })\n    })\n\n    // upload progress events can occur frequently, especially when you have a good\n    // connection to the remote server. Therefore, we are throtteling them to\n    // prevent accessive function calls.\n    // see also: https://github.com/tus/tus-js-client/commit/9940f27b2361fd7e10ba58b09b60d82422183bbb\n    const throttledCalculateProgress = throttle(this.calculateProgress, 100, { leading: true, trailing: false })\n\n    this.on('core:upload-progress', (data) => {\n      throttledCalculateProgress(data)\n    })\n\n    this.on('core:upload-success', (fileID, uploadResp, uploadURL) => {\n      const updatedFiles = Object.assign({}, this.getState().files)\n      const updatedFile = Object.assign({}, updatedFiles[fileID], {\n        progress: Object.assign({}, updatedFiles[fileID].progress, {\n          uploadComplete: true,\n          percentage: 100\n        }),\n        uploadURL: uploadURL,\n        isPaused: false\n      })\n      updatedFiles[fileID] = updatedFile\n\n      this.setState({\n        files: updatedFiles\n      })\n\n      this.calculateTotalProgress()\n    })\n\n    this.on('core:update-meta', (data, fileID) => {\n      this.updateMeta(data, fileID)\n    })\n\n    this.on('core:preprocess-progress', (fileID, progress) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress, {\n          preprocess: progress\n        })\n      })\n\n      this.setState({ files: files })\n    })\n    this.on('core:preprocess-complete', (fileID) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress)\n      })\n      delete files[fileID].progress.preprocess\n\n      this.setState({ files: files })\n    })\n    this.on('core:postprocess-progress', (fileID, progress) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress, {\n          postprocess: progress\n        })\n      })\n\n      this.setState({ files: files })\n    })\n    this.on('core:postprocess-complete', (fileID) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress)\n      })\n      delete files[fileID].progress.postprocess\n      // TODO should we set some kind of `fullyComplete` property on the file object\n      // so it's easier to see that the file is upload…fully complete…rather than\n      // what we have to do now (`uploadComplete && !postprocess`)\n\n      this.setState({ files: files })\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => this.updateOnlineStatus())\n      window.addEventListener('offline', () => this.updateOnlineStatus())\n      setTimeout(() => this.updateOnlineStatus(), 3000)\n    }\n  }\n\n  updateOnlineStatus () {\n    const online =\n      typeof window.navigator.onLine !== 'undefined'\n        ? window.navigator.onLine\n        : true\n    if (!online) {\n      this.emit('is-offline')\n      this.info('No internet connection', 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info('Connected!', 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  getID () {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core\n   *\n   * @param {Class} Plugin object\n   * @param {Object} options object that will be passed to Plugin later\n   * @return {Object} self for chaining\n   */\n  use (Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      let msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` +\n        ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, opts)\n    const pluginId = plugin.id\n    this.plugins[plugin.type] = this.plugins[plugin.type] || []\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    let existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      let msg = `Already found a plugin named '${existsPluginAlready.id}'.\n        Tried to use: '${pluginId}'.\n        Uppy is currently limited to running one of every plugin.\n        Share your use case with us over at\n        https://github.com/transloadit/uppy/issues/\n        if you want us to reconsider.`\n      throw new Error(msg)\n    }\n\n    this.plugins[plugin.type].push(plugin)\n    plugin.install()\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name\n   *\n   * @param string name description\n   */\n  getPlugin (name) {\n    let foundPlugin = false\n    this.iteratePlugins((plugin) => {\n      const pluginName = plugin.id\n      if (pluginName === name) {\n        foundPlugin = plugin\n        return false\n      }\n    })\n    return foundPlugin\n  }\n\n  /**\n   * Iterate through all `use`d plugins\n   *\n   * @param function method description\n   */\n  iteratePlugins (method) {\n    Object.keys(this.plugins).forEach((pluginType) => {\n      this.plugins[pluginType].forEach(method)\n    })\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {Plugin} instance The plugin instance to remove.\n   */\n  removePlugin (instance) {\n    const list = this.plugins[instance.type]\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const index = list.indexOf(instance)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  close () {\n    this.reset()\n\n    if (this.withDevTools) {\n      this.devToolsUnsubscribe()\n    }\n\n    this.iteratePlugins((plugin) => {\n      plugin.uninstall()\n    })\n\n    if (this.socket) {\n      this.socket.close()\n    }\n  }\n\n  /**\n  * Set info message in `state.info`, so that UI plugins like `Informer`\n  * can display the message\n  *\n  * @param {string} msg Message to be displayed by the informer\n  */\n\n  info (message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: {\n        isHidden: false,\n        type: type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }\n    })\n\n    this.emit('core:info-visible')\n\n    window.clearTimeout(this.infoTimeoutID)\n    if (duration === 0) {\n      this.infoTimeoutID = undefined\n      return\n    }\n\n    // hide the informer after `duration` milliseconds\n    this.infoTimeoutID = setTimeout(this.hideInfo, duration)\n  }\n\n  hideInfo () {\n    const newInfo = Object.assign({}, this.state.info, {\n      isHidden: true\n    })\n    this.setState({\n      info: newInfo\n    })\n    this.emit('core:info-hidden')\n  }\n\n  /**\n   * Logs stuff to console, only if `debug` is set to true. Silent in production.\n   *\n   * @param {String|Object} msg to log\n   * @param {String} type optional `error` or `warning`\n   */\n  log (msg, type) {\n    if (!this.opts.debug) {\n      return\n    }\n\n    let message = `[Uppy] [${Utils.getTimeStamp()}] ${msg}`\n\n    global.uppyLog = global.uppyLog + '\\n' + 'DEBUG LOG: ' + msg\n\n    if (type === 'error') {\n      console.error(message)\n      return\n    }\n\n    if (type === 'warning') {\n      console.warn(message)\n      return\n    }\n\n    if (msg === `${msg}`) {\n      console.log(message)\n    } else {\n      message = `[Uppy] [${Utils.getTimeStamp()}]`\n      console.log(message)\n      console.dir(msg)\n    }\n  }\n\n  initSocket (opts) {\n    if (!this.socket) {\n      this.socket = new UppySocket(opts)\n    }\n\n    return this.socket\n  }\n\n  /**\n   * Initializes actions, installs all plugins (by iterating on them and calling `install`), sets options\n   *\n   */\n  run () {\n    this.log('Core is run, initializing actions...')\n    this.actions()\n\n    return this\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore (uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.state.currentUploads[uploadID]) {\n      this.removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this.runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @return {string} ID of this upload.\n   */\n  createUpload (fileIDs) {\n    const uploadID = cuid()\n\n    this.emit('core:upload', {\n      id: uploadID,\n      fileIDs: fileIDs\n    })\n\n    this.setState({\n      currentUploads: Object.assign({}, this.state.currentUploads, {\n        [uploadID]: {\n          fileIDs: fileIDs,\n          step: 0\n        }\n      })\n    })\n\n    return uploadID\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n  removeUpload (uploadID) {\n    const currentUploads = Object.assign({}, this.state.currentUploads)\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads: currentUploads\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */\n  runUpload (uploadID) {\n    const uploadData = this.state.currentUploads[uploadID]\n    const fileIDs = uploadData.fileIDs\n    const restoreStep = uploadData.step\n\n    const steps = [\n      ...this.preProcessors,\n      ...this.uploaders,\n      ...this.postProcessors\n    ]\n    let lastStep = Promise.resolve()\n    steps.forEach((fn, step) => {\n      // Skip this step if we are restoring and have already completed this step before.\n      if (step < restoreStep) {\n        return\n      }\n\n      lastStep = lastStep.then(() => {\n        const currentUpload = Object.assign({}, this.state.currentUploads[uploadID], {\n          step: step\n        })\n        this.setState({\n          currentUploads: Object.assign({}, this.state.currentUploads, {\n            [uploadID]: currentUpload\n          })\n        })\n        // TODO give this the `currentUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        return fn(fileIDs, uploadID)\n      })\n    })\n\n    // Not returning the `catch`ed promise, because we still want to return a rejected\n    // promise from this method if the upload failed.\n    lastStep.catch((err) => {\n      this.emit('core:error', err)\n\n      this.removeUpload(uploadID)\n    })\n\n    return lastStep.then(() => {\n      const files = fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => !file.error)\n      const failed = files.filter((file) => file.error)\n      this.emit('core:complete', { successful, failed })\n\n      // Compatibility with pre-0.21\n      this.emit('core:success', fileIDs)\n\n      this.removeUpload(uploadID)\n\n      return { successful, failed }\n    })\n  }\n\n  /**\n * Start an upload for all the files that are not currently being uploaded.\n *\n * @return {Promise}\n */\n  upload () {\n    if (!this.plugins.uploader) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    const isMinNumberOfFilesReached = this.checkMinNumberOfFiles()\n    if (!isMinNumberOfFilesReached) {\n      return Promise.reject(new Error('Minimum number of files has not been reached'))\n    }\n\n    const beforeUpload = Promise.resolve()\n      .then(() => this.opts.onBeforeUpload(this.state.files))\n\n    return beforeUpload.catch((err) => {\n      const message = typeof err === 'object' ? err.message : err\n      this.info(message, 'error', 5000)\n      return Promise.reject(new Error(`onBeforeUpload: ${message}`))\n    }).then(() => {\n      const waitingFileIDs = []\n      Object.keys(this.state.files).forEach((fileID) => {\n        const file = this.getFile(fileID)\n\n        if (!file.progress.uploadStarted || file.isRemote) {\n          waitingFileIDs.push(file.id)\n        }\n      })\n\n      const uploadID = this.createUpload(waitingFileIDs)\n      return this.runUpload(uploadID)\n    })\n  }\n}\n\nmodule.exports = function (opts) {\n  return new Uppy(opts)\n}\n"]}