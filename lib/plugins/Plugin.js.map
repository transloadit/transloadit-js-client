{"version":3,"sources":["../../src/plugins/Plugin.js"],"names":["yo","require","nanoraf","findDOMElement","getFormData","module","exports","core","opts","update","bind","mount","install","uninstall","getPluginState","state","plugins","id","setPluginState","setState","el","updateUI","target","plugin","callerPluginName","targetElement","render","log","getMetaFromForm","nodeName","formMeta","setMeta","replaceTargetContent","innerHTML","appendChild","targetPlugin","Plugin","Target","iteratePlugins","targetPluginName","addTarget","Error","unmount","parentNode","removeChild"],"mappings":"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","file":"Plugin.js","sourcesContent":["const yo = require('yo-yo')\nconst nanoraf = require('nanoraf')\nconst { findDOMElement } = require('../core/Utils')\nconst getFormData = require('get-form-data')\n\n/**\n * Boilerplate that all Plugins share - and should not be used\n * directly. It also shows which methods final plugins should implement/override,\n * this deciding on structure.\n *\n * @param {object} main Uppy core object\n * @param {object} object with plugin options\n * @return {array | string} files or success/fail message\n */\nmodule.exports = class Plugin {\n  constructor (core, opts) {\n    this.core = core\n    this.opts = opts || {}\n\n    // clear everything inside the target selector\n    // this.opts.replaceTargetContent = this.opts.replaceTargetContent !== undefined ? this.opts.replaceTargetContent : true\n\n    this.update = this.update.bind(this)\n    this.mount = this.mount.bind(this)\n    this.install = this.install.bind(this)\n    this.uninstall = this.uninstall.bind(this)\n  }\n\n  getPluginState () {\n    return this.core.state.plugins[this.id]\n  }\n\n  setPluginState (update) {\n    const plugins = Object.assign({}, this.core.state.plugins)\n    plugins[this.id] = Object.assign({}, plugins[this.id], update)\n\n    this.core.setState({\n      plugins: plugins\n    })\n  }\n\n  update (state) {\n    if (typeof this.el === 'undefined') {\n      return\n    }\n\n    if (this.updateUI) {\n      this.updateUI(state)\n    }\n  }\n\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   *\n   * @param {String|Object} target\n   *\n   */\n  mount (target, plugin) {\n    const callerPluginName = plugin.id\n\n    const targetElement = findDOMElement(target)\n\n    // Set up nanoraf.\n    this.updateUI = nanoraf((state) => {\n      this.el = yo.update(this.el, this.render(state))\n    })\n\n    if (targetElement) {\n      this.core.log(`Installing ${callerPluginName} to a DOM element`)\n\n      // attempt to extract meta from form element\n      if (this.opts.getMetaFromForm && targetElement.nodeName === 'FORM') {\n        const formMeta = getFormData(targetElement)\n        this.core.setMeta(formMeta)\n      }\n\n      // clear everything inside the target container\n      if (this.opts.replaceTargetContent) {\n        targetElement.innerHTML = ''\n      }\n\n      this.el = plugin.render(this.core.state)\n      targetElement.appendChild(this.el)\n\n      this.target = targetElement\n\n      return targetElement\n    }\n\n    let targetPlugin\n    if (typeof target === 'object' && target instanceof Plugin) {\n      // Targeting a plugin *instance*\n      targetPlugin = target\n    } else if (typeof target === 'function') {\n      // Targeting a plugin type\n      const Target = target\n      // Find the target plugin instance.\n      this.core.iteratePlugins((plugin) => {\n        if (plugin instanceof Target) {\n          targetPlugin = plugin\n          return false\n        }\n      })\n    }\n\n    if (targetPlugin) {\n      const targetPluginName = targetPlugin.id\n      this.core.log(`Installing ${callerPluginName} to ${targetPluginName}`)\n      this.target = targetPlugin\n      return targetPlugin.addTarget(plugin)\n    }\n\n    this.core.log(`Not installing ${callerPluginName}`)\n    throw new Error(`Invalid target option given to ${callerPluginName}`)\n  }\n\n  render (state) {\n    throw (new Error('Extend the render method to add your plugin to a DOM element'))\n  }\n\n  addTarget (plugin) {\n    throw (new Error('Extend the addTarget method to add your plugin to another plugin\\'s target'))\n  }\n\n  unmount () {\n    if (this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el)\n    }\n    this.target = null\n  }\n\n  install () {\n\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}