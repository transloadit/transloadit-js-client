{"version":3,"sources":["../../../src/plugins/GoldenRetriever/index.js"],"names":["Plugin","require","ServiceWorkerStore","IndexedDBStore","MetaDataStore","module","exports","core","opts","type","id","title","defaultOptions","expires","serviceWorker","storeName","getID","indexedDB","saveFilesStateToLocalStorage","bind","loadFilesStateFromLocalStorage","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","onBlobsLoaded","savedState","load","log","setState","getWaitingFiles","waitingFiles","allFiles","state","files","Object","keys","forEach","fileID","file","getFile","progress","uploadStarted","getUploadingFiles","uploadingFiles","currentUploads","uploadIDs","uploadID","filesInUpload","fileIDs","filesToSave","save","list","then","blobs","numberOfFilesRecovered","length","numberOfFilesTryingToRecover","info","obsoleteBlobs","updatedFiles","originalFile","push","cachedData","updatedFileData","data","isRestored","updatedFile","generatePreview","emit","deleteBlobs","promises","delete","Promise","all","install","on","isRemote","put","catch","err","getState","uploadId","restore"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../Plugin')\nconst ServiceWorkerStore = require('./ServiceWorkerStore')\nconst IndexedDBStore = require('./IndexedDBStore')\nconst MetaDataStore = require('./MetaDataStore')\n\n/**\n* The Golden Retriever plugin â€” restores selected files and resumes uploads\n* after a closed tab or a browser crash!\n*\n* Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\n* https://uppy.io/blog/2017/07/golden-retriever/\n*/\nmodule.exports = class GoldenRetriever extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'debugger'\n    this.id = 'GoldenRetriever'\n    this.title = 'Restore Files'\n\n    const defaultOptions = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      serviceWorker: false\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.MetaDataStore = new MetaDataStore({\n      expires: this.opts.expires,\n      storeName: core.getID()\n    })\n    this.ServiceWorkerStore = null\n    if (this.opts.serviceWorker) {\n      this.ServiceWorkerStore = new ServiceWorkerStore({ storeName: core.getID() })\n    }\n    this.IndexedDBStore = new IndexedDBStore(Object.assign(\n      { expires: this.opts.expires },\n      opts.indexedDB || {},\n      { storeName: core.getID() }))\n\n    this.saveFilesStateToLocalStorage = this.saveFilesStateToLocalStorage.bind(this)\n    this.loadFilesStateFromLocalStorage = this.loadFilesStateFromLocalStorage.bind(this)\n    this.loadFileBlobsFromServiceWorker = this.loadFileBlobsFromServiceWorker.bind(this)\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\n  }\n\n  loadFilesStateFromLocalStorage () {\n    const savedState = this.MetaDataStore.load()\n\n    if (savedState) {\n      this.core.log('Recovered some state from Local Storage')\n      this.core.setState(savedState)\n    }\n  }\n\n  /**\n   * Get file objects that are currently waiting: they've been selected,\n   * but aren't yet being uploaded.\n   */\n  getWaitingFiles () {\n    const waitingFiles = {}\n\n    const allFiles = this.core.state.files\n    Object.keys(allFiles).forEach((fileID) => {\n      const file = this.core.getFile(fileID)\n      if (!file.progress || !file.progress.uploadStarted) {\n        waitingFiles[fileID] = file\n      }\n    })\n\n    return waitingFiles\n  }\n\n  /**\n   * Get file objects that are currently being uploaded. If a file has finished\n   * uploading, but the other files in the same batch have not, the finished\n   * file is also returned.\n   */\n  getUploadingFiles () {\n    const uploadingFiles = {}\n\n    const { currentUploads } = this.core.state\n    if (currentUploads) {\n      const uploadIDs = Object.keys(currentUploads)\n      uploadIDs.forEach((uploadID) => {\n        const filesInUpload = currentUploads[uploadID].fileIDs\n        filesInUpload.forEach((fileID) => {\n          uploadingFiles[fileID] = this.core.getFile(fileID)\n        })\n      })\n    }\n\n    return uploadingFiles\n  }\n\n  saveFilesStateToLocalStorage () {\n    const filesToSave = Object.assign(\n      this.getWaitingFiles(),\n      this.getUploadingFiles()\n    )\n\n    this.MetaDataStore.save({\n      currentUploads: this.core.state.currentUploads,\n      files: filesToSave\n    })\n  }\n\n  loadFileBlobsFromServiceWorker () {\n    this.ServiceWorkerStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n      const numberOfFilesTryingToRecover = Object.keys(this.core.state.files).length\n      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {\n        this.core.log(`Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`)\n        this.core.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\n        this.onBlobsLoaded(blobs)\n      } else {\n        this.core.log('Failed to recover blobs from Service Worker, trying IndexedDB now...')\n        this.loadFileBlobsFromIndexedDB()\n      }\n    })\n  }\n\n  loadFileBlobsFromIndexedDB () {\n    this.IndexedDBStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n\n      if (numberOfFilesRecovered > 0) {\n        this.core.log(`Successfully recovered ${numberOfFilesRecovered} blobs from Indexed DB!`)\n        this.core.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\n        return this.onBlobsLoaded(blobs)\n      }\n      this.core.log('Couldnâ€™t recover anything from IndexedDB :(')\n    })\n  }\n\n  onBlobsLoaded (blobs) {\n    const obsoleteBlobs = []\n    const updatedFiles = Object.assign({}, this.core.state.files)\n    Object.keys(blobs).forEach((fileID) => {\n      const originalFile = this.core.getFile(fileID)\n      if (!originalFile) {\n        obsoleteBlobs.push(fileID)\n        return\n      }\n\n      const cachedData = blobs[fileID]\n\n      const updatedFileData = {\n        data: cachedData,\n        isRestored: true\n      }\n      const updatedFile = Object.assign({}, originalFile, updatedFileData)\n      updatedFiles[fileID] = updatedFile\n\n      this.core.generatePreview(updatedFile)\n    })\n    this.core.setState({\n      files: updatedFiles\n    })\n    this.core.emit('core:restored')\n\n    if (obsoleteBlobs.length) {\n      this.deleteBlobs(obsoleteBlobs).then(() => {\n        this.core.log(`[GoldenRetriever] cleaned up ${obsoleteBlobs.length} old files`)\n      })\n    }\n  }\n\n  deleteBlobs (fileIDs) {\n    const promises = []\n    fileIDs.forEach((id) => {\n      if (this.ServiceWorkerStore) {\n        promises.push(this.ServiceWorkerStore.delete(id))\n      }\n      if (this.IndexedDBStore) {\n        promises.push(this.IndexedDBStore.delete(id))\n      }\n    })\n    return Promise.all(promises)\n  }\n\n  install () {\n    this.loadFilesStateFromLocalStorage()\n\n    if (Object.keys(this.core.state.files).length > 0) {\n      if (this.ServiceWorkerStore) {\n        this.core.log('Attempting to load files from Service Worker...')\n        this.loadFileBlobsFromServiceWorker()\n      } else {\n        this.core.log('Attempting to load files from Indexed DB...')\n        this.loadFileBlobsFromIndexedDB()\n      }\n    }\n\n    this.core.on('core:file-added', (file) => {\n      if (file.isRemote) return\n\n      if (this.ServiceWorkerStore) {\n        this.ServiceWorkerStore.put(file).catch((err) => {\n          this.core.log('Could not store file', 'error')\n          this.core.log(err)\n        })\n      }\n\n      this.IndexedDBStore.put(file).catch((err) => {\n        this.core.log('Could not store file', 'error')\n        this.core.log(err)\n      })\n    })\n\n    this.core.on('core:file-removed', (fileID) => {\n      if (this.ServiceWorkerStore) this.ServiceWorkerStore.delete(fileID)\n      this.IndexedDBStore.delete(fileID)\n    })\n\n    this.core.on('core:success', (fileIDs) => {\n      this.deleteBlobs(fileIDs).then(() => {\n        this.core.log(`[GoldenRetriever] removed ${fileIDs.length} files that finished uploading`)\n      })\n    })\n\n    this.core.on('core:state-update', this.saveFilesStateToLocalStorage)\n\n    this.core.on('core:restored', () => {\n      // start all uploads again when file blobs are restored\n      const { currentUploads } = this.core.getState()\n      if (currentUploads) {\n        Object.keys(currentUploads).forEach((uploadId) => {\n          this.core.restore(uploadId, currentUploads[uploadId])\n        })\n      }\n    })\n  }\n}\n"]}