{"version":3,"sources":["../../src/plugins/XHRUpload.js"],"names":["Plugin","require","UppySocket","emitSocketProgress","getSocketHost","settle","module","exports","core","opts","type","id","title","defaultOptions","formData","fieldName","method","metaFields","responseUrlFieldName","bundle","headers","getResponseData","xhr","JSON","parse","response","getResponseError","Error","handleUpload","bind","getOptions","file","state","xhrUpload","createFormDataUpload","formPost","FormData","Array","isArray","Object","keys","meta","forEach","item","append","data","createBareUpload","upload","current","total","log","resolve","reject","XMLHttpRequest","addEventListener","ev","lengthComputable","emit","uploader","bytesUploaded","loaded","bytesTotal","target","status","resp","uploadURL","name","error","request","open","toUpperCase","endpoint","header","setRequestHeader","send","on","fileID","abort","uploadRemote","fields","fetch","remote","url","credentials","body","stringify","size","fieldname","then","res","statusText","json","token","host","socket","progressData","close","uploadFiles","files","promises","map","i","parseInt","length","isRemote","fileIDs","Promise","getFile","install","addUploader","uninstall","removeUploader"],"mappings":"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","file":"XHRUpload.js","sourcesContent":["const Plugin = require('./Plugin')\nconst UppySocket = require('../core/UppySocket')\nconst {\n  emitSocketProgress,\n  getSocketHost,\n  settle\n} = require('../core/Utils')\n\nmodule.exports = class XHRUpload extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'XHRUpload'\n    this.title = 'XHRUpload'\n\n    // Default options\n    const defaultOptions = {\n      formData: true,\n      fieldName: 'files[]',\n      method: 'post',\n      metaFields: null,\n      responseUrlFieldName: 'url',\n      bundle: true,\n      headers: {},\n      getResponseData (xhr) {\n        return JSON.parse(xhr.response)\n      },\n      getResponseError (xhr) {\n        return new Error('Upload error')\n      }\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  getOptions (file) {\n    const opts = Object.assign({},\n      this.opts,\n      this.core.state.xhrUpload || {},\n      file.xhrUpload || {}\n    )\n    opts.headers = {}\n    Object.assign(opts.headers, this.opts.headers)\n    if (this.core.state.xhrUpload) {\n      Object.assign(opts.headers, this.core.state.xhrUpload.headers)\n    }\n    if (file.xhrUpload) {\n      Object.assign(opts.headers, file.xhrUpload.headers)\n    }\n\n    return opts\n  }\n\n  createFormDataUpload (file, opts) {\n    const formPost = new FormData()\n\n    const metaFields = Array.isArray(opts.metaFields)\n      ? opts.metaFields\n      // Send along all fields by default.\n      : Object.keys(file.meta)\n    metaFields.forEach((item) => {\n      formPost.append(item, file.meta[item])\n    })\n\n    formPost.append(opts.fieldName, file.data)\n\n    return formPost\n  }\n\n  createBareUpload (file, opts) {\n    return file.data\n  }\n\n  upload (file, current, total) {\n    const opts = this.getOptions(file)\n\n    this.core.log(`uploading ${current} of ${total}`)\n    return new Promise((resolve, reject) => {\n      const data = opts.formData\n        ? this.createFormDataUpload(file, opts)\n        : this.createBareUpload(file, opts)\n\n      const xhr = new XMLHttpRequest()\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        if (ev.lengthComputable) {\n          this.core.emit('core:upload-progress', {\n            uploader: this,\n            id: file.id,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        }\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        if (ev.target.status >= 200 && ev.target.status < 300) {\n          const resp = opts.getResponseData(xhr)\n          const uploadURL = resp[opts.responseUrlFieldName]\n\n          this.core.emit('core:upload-success', file.id, resp, uploadURL)\n\n          if (uploadURL) {\n            this.core.log(`Download ${file.name} from ${file.uploadURL}`)\n          }\n\n          return resolve(file)\n        } else {\n          const error = opts.getResponseError(xhr) || new Error('Upload error')\n          error.request = xhr\n          this.core.emit('core:upload-error', file.id, error)\n          return reject(error)\n        }\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        const error = opts.getResponseError(xhr) || new Error('Upload error')\n        this.core.emit('core:upload-error', file.id, error)\n        return reject(new Error('Upload error'))\n      })\n\n      xhr.open(opts.method.toUpperCase(), opts.endpoint, true)\n\n      Object.keys(opts.headers).forEach((header) => {\n        xhr.setRequestHeader(header, opts.headers[header])\n      })\n\n      xhr.send(data)\n\n      this.core.on('core:upload-cancel', (fileID) => {\n        if (fileID === file.id) {\n          xhr.abort()\n        }\n      })\n\n      this.core.on('core:cancel-all', () => {\n        // const files = this.core.getState().files\n        // if (!files[file.id]) return\n        xhr.abort()\n      })\n\n      this.core.emit('core:upload-started', file.id)\n    })\n  }\n\n  uploadRemote (file, current, total) {\n    const opts = this.getOptions(file)\n    return new Promise((resolve, reject) => {\n      this.core.emit('core:upload-started', file.id)\n\n      const fields = {}\n      const metaFields = Array.isArray(opts.metaFields)\n        ? opts.metaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n\n      metaFields.forEach((name) => {\n        fields[name] = file.meta.name\n      })\n\n      fetch(file.remote.url, {\n        method: 'post',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.assign({}, file.remote.body, {\n          endpoint: opts.endpoint,\n          size: file.data.size,\n          fieldname: opts.fieldName,\n          fields,\n          headers: opts.headers\n        }))\n      })\n      .then((res) => {\n        if (res.status < 200 && res.status > 300) {\n          return reject(res.statusText)\n        }\n\n        res.json().then((data) => {\n          const token = data.token\n          const host = getSocketHost(file.remote.host)\n          const socket = new UppySocket({ target: `${host}/api/${token}` })\n\n          socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n          socket.on('success', (data) => {\n            this.core.emit('core:upload-success', file.id, data, data.url)\n            socket.close()\n            return resolve()\n          })\n        })\n      })\n    })\n  }\n\n  uploadFiles (files) {\n    const promises = files.map((file, i) => {\n      const current = parseInt(i, 10) + 1\n      const total = files.length\n\n      if (file.isRemote) {\n        return this.uploadRemote(file, current, total)\n      } else {\n        return this.upload(file, current, total)\n      }\n    })\n\n    return settle(promises)\n  }\n\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.core.log('[XHRUpload] No files to upload!')\n      return Promise.resolve()\n    }\n\n    this.core.log('[XHRUpload] Uploading...')\n    const files = fileIDs.map(getFile, this)\n    function getFile (fileID) {\n      return this.core.state.files[fileID]\n    }\n\n    return this.uploadFiles(files).then(() => null)\n  }\n\n  install () {\n    this.core.addUploader(this.handleUpload)\n  }\n\n  uninstall () {\n    this.core.removeUploader(this.handleUpload)\n  }\n}\n"]}