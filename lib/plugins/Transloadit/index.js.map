{"version":3,"sources":["../../../src/plugins/Transloadit/index.js"],"names":["Translator","require","Plugin","Client","StatusSocket","module","exports","core","opts","type","id","title","defaultLocale","strings","creatingAssembly","creatingAssemblyFailed","encoding","defaultOptions","waitForEncoding","waitForMetadata","alwaysRunAssembly","importFromUploadURLs","signature","params","fields","getAssemblyOptions","file","options","locale","translator","i18n","translate","bind","prepareUpload","afterUpload","onFileUploadURLAvailable","validateParams","client","sockets","Error","JSON","parse","err","message","auth","key","fileIDs","Promise","all","map","fileID","getFile","promise","resolve","then","assemblyOptions","dedupeAssemblyOptions","list","dedupeMap","Object","create","forEach","stringify","push","keys","createAssembly","uploadID","pluginOptions","log","expectedFiles","length","assembly","state","getPluginState","assemblyList","uploadsAssemblies","concat","assembly_id","setPluginState","assemblies","attachAssemblyMetadata","tlMeta","assembly_url","filename","name","fieldname","meta","tus","endpoint","tus_url","metaFields","uploadUrl","transloadit","newFile","files","setState","emit","connectSocket","catch","info","shouldWait","reserveFiles","reserveFile","addFile","findFile","uploadedFile","hasOwnProperty","uploadURL","tus_upload_url","onFileUploadComplete","assemblyId","getAssembly","onResult","stepName","result","original_id","localId","results","onAssemblyFinished","url","getAssemblyStatus","socket","websocket_url","on","error","assembly_ssl_url","reject","mode","optionsPromise","allOptions","assemblyIDs","assemblyID","close","finishedAssemblies","indexOf","getAssemblyFiles","removeListeners","onAssemblyError","onImportError","off","install","addPreProcessor","addPostProcessor","uninstall","removePreProcessor","removePostProcessor","filter"],"mappings":"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","file":"index.js","sourcesContent":["const Translator = require('../../core/Translator')\nconst Plugin = require('../Plugin')\nconst Client = require('./Client')\nconst StatusSocket = require('./Socket')\n\n/**\n * Upload files to Transloadit using Tus.\n */\nmodule.exports = class Transloadit extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'Transloadit'\n    this.title = 'Transloadit'\n\n    const defaultLocale = {\n      strings: {\n        creatingAssembly: 'Preparing upload...',\n        creatingAssemblyFailed: 'Transloadit: Could not create assembly',\n        encoding: 'Encoding...'\n      }\n    }\n\n    const defaultOptions = {\n      waitForEncoding: false,\n      waitForMetadata: false,\n      alwaysRunAssembly: false, // TODO name\n      importFromUploadURLs: false,\n      signature: null,\n      params: null,\n      fields: {},\n      getAssemblyOptions (file, options) {\n        return {\n          params: options.params,\n          signature: options.signature,\n          fields: options.fields\n        }\n      },\n      locale: defaultLocale\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.translator = new Translator({ locale: this.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n    this.afterUpload = this.afterUpload.bind(this)\n    this.onFileUploadURLAvailable = this.onFileUploadURLAvailable.bind(this)\n\n    if (this.opts.params) {\n      this.validateParams(this.opts.params)\n    }\n\n    this.client = new Client()\n    this.sockets = {}\n  }\n\n  validateParams (params) {\n    if (!params) {\n      throw new Error('Transloadit: The `params` option is required.')\n    }\n\n    if (typeof params === 'string') {\n      try {\n        params = JSON.parse(params)\n      } catch (err) {\n        // Tell the user that this is not an Uppy bug!\n        err.message = 'Transloadit: The `params` option is a malformed JSON string: ' +\n          err.message\n        throw err\n      }\n    }\n\n    if (!params.auth || !params.auth.key) {\n      throw new Error('Transloadit: The `params.auth.key` option is required. ' +\n        'You can find your Transloadit API key at https://transloadit.com/accounts/credentials.')\n    }\n  }\n\n  getAssemblyOptions (fileIDs) {\n    const options = this.opts\n    return Promise.all(\n      fileIDs.map((fileID) => {\n        const file = this.core.getFile(fileID)\n        const promise = Promise.resolve()\n          .then(() => options.getAssemblyOptions(file, options))\n        return promise.then((assemblyOptions) => {\n          this.validateParams(assemblyOptions.params)\n\n          return {\n            fileIDs: [fileID],\n            options: assemblyOptions\n          }\n        })\n      })\n    )\n  }\n\n  dedupeAssemblyOptions (list) {\n    const dedupeMap = Object.create(null)\n    list.forEach(({ fileIDs, options }) => {\n      const id = JSON.stringify(options)\n      if (dedupeMap[id]) {\n        dedupeMap[id].fileIDs.push(...fileIDs)\n      } else {\n        dedupeMap[id] = {\n          options,\n          fileIDs: [...fileIDs]\n        }\n      }\n    })\n\n    return Object.keys(dedupeMap).map((id) => dedupeMap[id])\n  }\n\n  createAssembly (fileIDs, uploadID, options) {\n    const pluginOptions = this.opts\n\n    this.core.log('Transloadit: create assembly')\n\n    return this.client.createAssembly({\n      params: options.params,\n      fields: options.fields,\n      expectedFiles: fileIDs.length,\n      signature: options.signature\n    }).then((assembly) => {\n      // Store the list of assemblies related to this upload.\n      const state = this.getPluginState()\n      const assemblyList = state.uploadsAssemblies[uploadID]\n      const uploadsAssemblies = Object.assign({}, state.uploadsAssemblies, {\n        [uploadID]: assemblyList.concat([ assembly.assembly_id ])\n      })\n\n      this.setPluginState({\n        assemblies: Object.assign(state.assemblies, {\n          [assembly.assembly_id]: assembly\n        }),\n        uploadsAssemblies\n      })\n\n      function attachAssemblyMetadata (file, assembly) {\n        // Attach meta parameters for the Tus plugin. See:\n        // https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n        // TODO Should this `meta` be moved to a `tus.meta` property instead?\n        const tlMeta = {\n          assembly_url: assembly.assembly_url,\n          filename: file.name,\n          fieldname: 'file'\n        }\n        const meta = Object.assign({}, file.meta, tlMeta)\n        // Add assembly-specific Tus endpoint.\n        const tus = Object.assign({}, file.tus, {\n          endpoint: assembly.tus_url,\n          // Only send assembly metadata to the tus endpoint.\n          metaFields: Object.keys(tlMeta),\n          // Make sure tus doesn't resume a previous upload.\n          uploadUrl: null\n        })\n        const transloadit = {\n          assembly: assembly.assembly_id\n        }\n\n        const newFile = Object.assign({}, file, { transloadit })\n        // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n        if (!pluginOptions.importFromUploadURLs) {\n          Object.assign(newFile, { meta, tus })\n        }\n        return newFile\n      }\n\n      const files = Object.assign({}, this.core.state.files)\n      fileIDs.forEach((id) => {\n        files[id] = attachAssemblyMetadata(files[id], assembly)\n      })\n\n      this.core.setState({ files })\n\n      this.core.emit('transloadit:assembly-created', assembly, fileIDs)\n\n      return this.connectSocket(assembly)\n        .then(() => assembly)\n    }).then((assembly) => {\n      this.core.log('Transloadit: Created assembly')\n      return assembly\n    }).catch((err) => {\n      this.core.info(this.i18n('creatingAssemblyFailed'), 'error', 0)\n\n      // Reject the promise.\n      throw err\n    })\n  }\n\n  shouldWait () {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the assembly.\n   */\n  reserveFiles (assembly, fileIDs) {\n    return Promise.all(fileIDs.map((fileID) => {\n      const file = this.core.getFile(fileID)\n      return this.client.reserveFile(assembly, file)\n    }))\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the assembly\n   * once they have been fully uploaded.\n   */\n  onFileUploadURLAvailable (fileID) {\n    const file = this.core.getFile(fileID)\n    if (!file || !file.transloadit || !file.transloadit.assembly) {\n      return\n    }\n\n    const state = this.getPluginState()\n    const assembly = state.assemblies[file.transloadit.assembly]\n\n    this.client.addFile(assembly, file).catch((err) => {\n      this.core.log(err)\n      this.core.emit('transloadit:import-error', assembly, file.id, err)\n    })\n  }\n\n  findFile (uploadedFile) {\n    const files = this.core.state.files\n    for (const id in files) {\n      if (!files.hasOwnProperty(id)) {\n        continue\n      }\n      if (files[id].uploadURL === uploadedFile.tus_upload_url) {\n        return files[id]\n      }\n    }\n  }\n\n  onFileUploadComplete (assemblyId, uploadedFile) {\n    const state = this.getPluginState()\n    const file = this.findFile(uploadedFile)\n    this.setPluginState({\n      files: Object.assign({}, state.files, {\n        [uploadedFile.id]: {\n          id: file.id,\n          uploadedFile\n        }\n      })\n    })\n    this.core.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId))\n  }\n\n  onResult (assemblyId, stepName, result) {\n    const state = this.getPluginState()\n    const file = state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null\n\n    this.setPluginState({\n      results: state.results.concat(result)\n    })\n    this.core.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId))\n  }\n\n  onAssemblyFinished (url) {\n    this.client.getAssemblyStatus(url).then((assembly) => {\n      const state = this.getPluginState()\n      this.setPluginState({\n        assemblies: Object.assign({}, state.assemblies, {\n          [assembly.assembly_id]: assembly\n        })\n      })\n      this.core.emit('transloadit:complete', assembly)\n    })\n  }\n\n  connectSocket (assembly) {\n    const socket = new StatusSocket(\n      assembly.websocket_url,\n      assembly\n    )\n    this.sockets[assembly.assembly_id] = socket\n\n    socket.on('upload', this.onFileUploadComplete.bind(this, assembly.assembly_id))\n    socket.on('error', (error) => {\n      this.core.emit('transloadit:assembly-error', assembly, error)\n    })\n\n    if (this.opts.waitForEncoding) {\n      socket.on('result', this.onResult.bind(this, assembly.assembly_id))\n    }\n\n    if (this.opts.waitForEncoding) {\n      socket.on('finished', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n      })\n    } else if (this.opts.waitForMetadata) {\n      socket.on('metadata', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n        this.core.emit('transloadit:complete', assembly)\n      })\n    }\n\n    return new Promise((resolve, reject) => {\n      socket.on('connect', resolve)\n      socket.on('error', reject)\n    }).then(() => {\n      this.core.log('Transloadit: Socket is ready')\n    })\n  }\n\n  prepareUpload (fileIDs, uploadID) {\n    fileIDs.forEach((fileID) => {\n      this.core.emit('core:preprocess-progress', fileID, {\n        mode: 'indeterminate',\n        message: this.i18n('creatingAssembly')\n      })\n    })\n\n    const createAssembly = ({ fileIDs, options }) => {\n      return this.createAssembly(fileIDs, uploadID, options).then((assembly) => {\n        if (this.opts.importFromUploadURLs) {\n          return this.reserveFiles(assembly, fileIDs)\n        }\n      }).then(() => {\n        fileIDs.forEach((fileID) => {\n          this.core.emit('core:preprocess-complete', fileID)\n        })\n      })\n    }\n\n    const state = this.getPluginState()\n    const uploadsAssemblies = Object.assign({},\n      state.uploadsAssemblies,\n      { [uploadID]: [] })\n    this.setPluginState({ uploadsAssemblies })\n\n    let optionsPromise\n    if (fileIDs.length > 0) {\n      optionsPromise = this.getAssemblyOptions(fileIDs)\n        .then((allOptions) => this.dedupeAssemblyOptions(allOptions))\n    } else if (this.opts.alwaysRunAssembly) {\n      optionsPromise = Promise.resolve(\n        this.opts.getAssemblyOptions(null, this.opts)\n      ).then((options) => {\n        this.validateParams(options.params)\n        return [\n          { fileIDs, options }\n        ]\n      })\n    } else {\n      // If there are no files and we do not `alwaysRunAssembly`,\n      // don't do anything.\n      return Promise.resolve()\n    }\n\n    return optionsPromise.then((assemblies) => Promise.all(\n      assemblies.map(createAssembly)\n    ))\n  }\n\n  afterUpload (fileIDs, uploadID) {\n    const state = this.getPluginState()\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.shouldWait()) {\n      assemblyIDs.forEach((assemblyID) => {\n        const socket = this.sockets[assemblyID]\n        socket.close()\n      })\n      return Promise.resolve()\n    }\n\n    // If no assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n    if (assemblyIDs.length === 0) {\n      return Promise.resolve()\n    }\n\n    let finishedAssemblies = 0\n\n    return new Promise((resolve, reject) => {\n      fileIDs.forEach((fileID) => {\n        this.core.emit('core:postprocess-progress', fileID, {\n          mode: 'indeterminate',\n          message: this.i18n('encoding')\n        })\n      })\n\n      const onAssemblyFinished = (assembly) => {\n        // An assembly for a different upload just finished. We can ignore it.\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          return\n        }\n\n        // TODO set the `file.uploadURL` to a result?\n        // We will probably need an option here so the plugin user can tell us\n        // which result to pick…?\n\n        const files = this.getAssemblyFiles(assembly.assembly_id)\n        files.forEach((file) => {\n          this.core.emit('core:postprocess-complete', file.id)\n        })\n\n        finishedAssemblies += 1\n        if (finishedAssemblies === assemblyIDs.length) {\n          // We're done, these listeners can be removed\n          removeListeners()\n          resolve()\n        }\n      }\n\n      const onAssemblyError = (assembly, error) => {\n        // An assembly for a different upload just finished. We can ignore it.\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          return\n        }\n\n        // Clear postprocessing state for all our files.\n        const files = this.getAssemblyFiles(assembly.assembly_id)\n        files.forEach((file) => {\n          // TODO Maybe make a postprocess-error event here?\n          this.core.emit('core:upload-error', file.id, error)\n\n          this.core.emit('core:postprocess-complete', file.id)\n        })\n\n        // Should we remove the listeners here or should we keep handling finished\n        // assemblies?\n        // Doing this for now so that it's not possible to receive more postprocessing\n        // events once the upload has failed.\n        removeListeners()\n\n        // Reject the `afterUpload()` promise.\n        reject(error)\n      }\n\n      const onImportError = (assembly, fileID, error) => {\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          return\n        }\n\n        // Not sure if we should be doing something when it's just one file failing.\n        // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n        // I think failing the upload is better than silently ignoring.\n        // In the future we should maybe have a way to resolve uploads with some failures,\n        // like returning an object with `{ successful, failed }` uploads.\n        onAssemblyError(assembly, error)\n      }\n\n      const removeListeners = () => {\n        this.core.off('transloadit:complete', onAssemblyFinished)\n        this.core.off('transloadit:assembly-error', onAssemblyError)\n        this.core.off('transloadit:import-error', onImportError)\n      }\n\n      this.core.on('transloadit:complete', onAssemblyFinished)\n      this.core.on('transloadit:assembly-error', onAssemblyError)\n      this.core.on('transloadit:import-error', onImportError)\n    }).then(() => {\n      // Clean up uploadID → assemblyIDs, they're no longer going to be used anywhere.\n      const state = this.getPluginState()\n      const uploadsAssemblies = Object.assign({}, state.uploadsAssemblies)\n      delete uploadsAssemblies[uploadID]\n      this.setPluginState({ uploadsAssemblies })\n    })\n  }\n\n  install () {\n    this.core.addPreProcessor(this.prepareUpload)\n    this.core.addPostProcessor(this.afterUpload)\n\n    if (this.opts.importFromUploadURLs) {\n      this.core.on('core:upload-success', this.onFileUploadURLAvailable)\n    }\n\n    this.setPluginState({\n      // Contains assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: []\n    })\n  }\n\n  uninstall () {\n    this.core.removePreProcessor(this.prepareUpload)\n    this.core.removePostProcessor(this.afterUpload)\n\n    if (this.opts.importFromUploadURLs) {\n      this.core.off('core:upload-success', this.onFileUploadURLAvailable)\n    }\n  }\n\n  getAssembly (id) {\n    const state = this.getPluginState()\n    return state.assemblies[id]\n  }\n\n  getAssemblyFiles (assemblyID) {\n    const fileIDs = Object.keys(this.core.state.files)\n    return fileIDs.map((fileID) => {\n      return this.core.getFile(fileID)\n    }).filter((file) => {\n      return file && file.transloadit && file.transloadit.assembly === assemblyID\n    })\n  }\n}\n"]}